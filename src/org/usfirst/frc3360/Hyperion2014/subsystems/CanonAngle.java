// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3360.Hyperion2014.subsystems;
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc3360.Hyperion2014.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3360.Hyperion2014.Robot;
import org.usfirst.frc3360.Hyperion2014.commands.CanonAngle_SetShooterAngle;
/**
 *
 */
public class CanonAngle extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController allWheelAngleMotor = RobotMap.canonAngleAllWheelAngleMotor;
    AnalogChannel anglePot = RobotMap.canonAngleAnglePot;
    DigitalInput upperAngleLimitSwitch = RobotMap.canonAngleUpperAngleLimitSwitch;
    DigitalInput lowerAngleLimitSwitch = RobotMap.canonAngleLowerAngleLimitSwitch;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double requestedAngleValue;
    static final double maxAngleValue = 1;
    static final double minAngleValue = -1;
    
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        
       
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    
    public void AngleDown(){
     //   if (!lowerAngleLimitSwitch.get()){
        allWheelAngleMotor.set(-1);
  
     //   }
    }
    
    public void AngleUp(){
        
     //   if (!upperAngleLimitSwitch.get()){
        allWheelAngleMotor.set(1);
        
    //    }
    }
    
    public void AngleStop(){
        allWheelAngleMotor.set(0);
    }
   
    public void SetRightAngle(){
        requestedAngleValue = Robot.oi.getDriverLeftJoystick().getRawAxis(3);
        
        if (requestedAngleValue > anglePot.getVoltage() && anglePot.getVoltage() < maxAngleValue){
            allWheelAngleMotor.set(1);
        }
        
        if (requestedAngleValue < anglePot.getVoltage() && anglePot.getVoltage() > minAngleValue){
            allWheelAngleMotor.set(-1);
        }
    }
    
    
    
}
