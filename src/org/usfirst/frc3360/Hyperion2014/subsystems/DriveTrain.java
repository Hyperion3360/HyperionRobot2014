// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3360.Hyperion2014.subsystems;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc3360.Hyperion2014.RobotMap;
import org.usfirst.frc3360.Hyperion2014.Robot;
import edu.wpi.first.wpilibj.command.Subsystem;


import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3360.Hyperion2014.Robot;
import org.usfirst.frc3360.Hyperion2014.commands.DriveTrain_MoveWithJoystick;
/**
 *
 */
public class DriveTrain extends Subsystem {

    static final double m_DEAD_ZONE_MARGIN = 0.05;

    static final double m_dbRATIO_SPEED_TO_POWER = 0.90;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController allWheelLeftMotor = RobotMap.driveTrainAllWheelLeftMotor;
    SpeedController allWheelRightMotor = RobotMap.driveTrainAllWheelRightMotor;
    RobotDrive allWheelRobotDrive = RobotMap.driveTrainAllWheelRobotDrive;
    Gyro robotFrameGyro = RobotMap.driveTrainRobotFrameGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveTrain_MoveWithJoystick());
        allWheelRobotDrive.tankDrive(0, 0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new DriveTrain_MoveWithJoystick());
    }
    
    public void setAutonomous()
    {
        System.out.println("DT: Going to autonomous mode");
        setDefaultCommand(null);
    }
    
    public void setTeleoperated()
    {
        System.out.println("DT: Going to teleoperated mode");
        setDefaultCommand(new DriveTrain_MoveWithJoystick());
    }
    
    public void setSpeed(double leftSpeedMS, double rightSpeedMS)
    {
        SmartDashboard.putNumber("Left motor speed", leftSpeedMS);
        SmartDashboard.putNumber("Rigth motor speed", rightSpeedMS);
        System.out.println("autonomous: left=" + leftSpeedMS * m_dbRATIO_SPEED_TO_POWER +
                           ", right=" + rightSpeedMS * m_dbRATIO_SPEED_TO_POWER);
        allWheelRobotDrive.tankDrive(leftSpeedMS * m_dbRATIO_SPEED_TO_POWER,
                                     rightSpeedMS * m_dbRATIO_SPEED_TO_POWER);
    }
    
    public void driveWithJoystick()
    {
        SmartDashboard.putNumber("Left motor speed", Robot.oi.getDriverLeftJoystick().getRawAxis(2));
        SmartDashboard.putNumber("Rigth motor speed", Robot.oi.getDriverLeftJoystick().getRawAxis(4));
        System.out.println("teleop: left=" + Robot.oi.getDriverLeftJoystick().getRawAxis(2) + ", right=" + Robot.oi.getDriverLeftJoystick().getRawAxis(4));
        allWheelRobotDrive.tankDrive(Robot.oi.getDriverLeftJoystick().getRawAxis(2),
                                     Robot.oi.getDriverLeftJoystick().getRawAxis(4));
    }
    
    public void MoveWithJoysticks(){
        double dLeftJoystick = Robot.oi.getDriverLeftJoystick().getRawAxis(2);
        double dRightJoystick = Robot.oi.getDriverRightJoystick().getRawAxis(2);
        
        // Give a dead zone to the joystick.
        
        if (dLeftJoystick < m_DEAD_ZONE_MARGIN && dLeftJoystick > -m_DEAD_ZONE_MARGIN)
        {
            dLeftJoystick = 0;
        }
        
        if (dRightJoystick < m_DEAD_ZONE_MARGIN && dRightJoystick > -m_DEAD_ZONE_MARGIN)
        {
            dRightJoystick = 0;
        }
        
   //     System.out.println("drivetrain loop");
        allWheelRobotDrive.tankDrive(-dLeftJoystick , -dRightJoystick);
    }
}
